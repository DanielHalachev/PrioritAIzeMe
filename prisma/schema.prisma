// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id             Int       @id @default(autoincrement())
  username       String    @unique
  email          String    @unique
  hashedPassword String
  firstName      String
  lastName       String
  role           UserRole  @default(USER)
  tasks          Task[] // tasks that the user created
  projects       Project[] // projects that the user owns

  TaskAssignees       TaskAssignees[] // tasks that the user is assigned to
  ProjectParticipants ProjectParticipants[] // projects that the user is a participant of
}

model Project {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  owner       User    @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tasks       Task[] // tasks that belong to the project
  ownerId     Int

  ProjectParticipants ProjectParticipants[] // participants of the project
}

enum Priority {
  NONE
  AUTO
  LOW
  MEDIUM
  HIGH
}

model Task {
  id                  Int       @id @default(autoincrement())
  title               String
  description         String?
  dueDate             DateTime?
  created             DateTime  @default(now())
  creator             User      @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  completed           Boolean?
  sentiment           Float?
  normalizedSentiment Float?
  priority            Priority  @default(AUTO)
  project             Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId           Int?
  creatorId           Int

  TaskAssignees TaskAssignees[]
}

// Many-to-many relation between `Task` and `User`, who is assigned to the task
model TaskAssignees {
  taskId Int
  userId Int
  task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([taskId, userId])
}

// Many-to-many relation between `Project` and `User`, who is a participant of the project
model ProjectParticipants {
  projectId Int
  userId    Int
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([projectId, userId])
}
